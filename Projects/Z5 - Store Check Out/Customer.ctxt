#BlueJ class context
comment0.params=
comment0.target=Customer()
comment0.text=\n\ No-argument\ constructor\ for\ objects\ of\ class\ Customer\n\ \n
comment1.params=jediKnightAndFriendOfCaptainSolo\ fireflyClassSpaceshipSenerity\ theOneTrueKingOfWesteros
comment1.target=Customer(java.lang.String,\ int,\ Product[][][])
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Customer\n\ \n\ @param\ jediKnightAndFriendOfCaptainSolo\ will\ become\ the\ user's\ name\n\ @param\ fireflyClassSpaceshipSerenity\ will\ become\ the\ total\ number\ of\ item\ space\ available\ in\ the\ cart\n\ @param\ theOneTrueKingOfWesteros\ will\ become\ the\ user's\ menu\n
comment10.params=
comment10.target=java.lang.String\ getReceipt()
comment10.text=\n\ creates\ a\ string\ representation\ of\ the\ purchases\ made\ today\n\ \n\ @see\ Product\#getReceipt()\ Product.getReceipt()\n\ @return\ the\ bill\ of\ all\ purchases\ made\ today\ in\ String\ format,\ including\ date\ and\ time\ of\ transaction,\ total\ cost\ per\ item\ and\ item\ type,\ and\ total\ cost\ of\ all\ transactions\n
comment11.params=
comment11.target=double\ getTotal()
comment11.text=\n\ gets\ the\ total\ price\ of\ the\ transaction\n\ \n\ @see\ \#getReceipt()\ getReceipt()\n\ @return\ the\ price\ of\ the\ transaction\ for\ each\ item\ in\ the\ cart\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\n\ returns\ the\ string\ representation\ of\ Customer\ object\n\ \n\ @return\ the\ string\ representation\ of\ Customer\ object\n
comment13.params=other
comment13.target=boolean\ equals(Customer)
comment13.text=\n\ checks\ to\ see\ if\ two\ customers\ are\ equal\n\ \n\ @param\ other\ the\ comparing\ Customer\ object\n\ @see\ Product\#equals(Product\ otherProduct)\ Product.equals(Product\ otherProduct)\n\ @return\ true\ if\ they\ are\ equal\n
comment14.params=
comment14.target=boolean\ cartFull()
comment14.text=\n\ checks\ if\ the\ Customer's\ cart\ is\ full\n\ \n\ @return\ returns\ false\ if\ there\ is\ still\ room\ in\ the\ cart\ for\ more\ items\n
comment15.params=newP\ i
comment15.target=void\ addToCart(Product,\ int)
comment15.text=\n\ adds\ a\ Product\ to\ the\ cart\n\ \n\ @param\ newP\ the\ product\ to\ be\ atted\ to\ the\ cart\n\ @param\ i\ the\ number\ of\ instances\ of\ newP\ to\ add\n
comment16.params=i
comment16.target=void\ removeFromCart(int)
comment16.text=\n\ removes\ a\ Product\ from\ the\ cart\n\ \n\ @param\ i\ the\ index\ of\ the\ Product\ in\ the\ items[]\ to\ remove\n
comment17.params=p
comment17.target=boolean\ alreadyInCart(Product)
comment17.text=\n\ checks\ to\ see\ if\ a\ given\ Product\ has\ already\ been\ selected\ for\ purchase\n\ \n\ @param\ p\ the\ Product\ to\ check\ against\ the\ cart\n\ @return\ true\ if\ the\ selected\ Product\ is\ already\ in\ the\ cart\n
comment18.params=p\ i
comment18.target=void\ removeNumOfItems(Product,\ int)
comment18.text=\n\ removes\ a\ number\ of\ instances\ from\ a\ given\ Product\n\ \n\ @param\ p\ the\ Product\ to\ remove\ instances\ from\n\ @param\ i\ the\ number\ of\ instances\ to\ remove\ from\ a\ given\ Product\n
comment2.params=
comment2.target=java.lang.String\ getName()
comment2.text=\n\ returns\ the\ user's\ name\n\ \n\ @return\ name\ of\ the\ customer\n
comment3.params=
comment3.target=Product[]\ getItems()
comment3.text=\n\ returns\ the\ cart\ as\ an\ Array\ of\ type\ Product\n\ \n\ @return\ the\ items\ Array\n
comment4.params=
comment4.target=int\ getNumInCart()
comment4.text=\n\ gets\ the\ number\ of\ items\ in\ the\ cart\ that\ were\ placed\ by\ the\ user\n\ \n\ @return\ the\ number\ of\ Products\ in\ cart\ that\ have\ be\ defined\n
comment5.params=
comment5.target=java.lang.String[]\ getCategoryList()
comment5.text=\n\ creates\ and\ returns\ an\ Array\ of\ Strings\ that\ is\ simply\ the\ names\ of\ each\ possible\ category\n\ \n\ @return\ the\ possible\ category\ names\ for\ the\ items\ in\ menu\n
comment6.params=cat
comment6.target=java.lang.String[]\ getSubCategoryList(int)
comment6.text=\n\ creates\ and\ returns\ an\ Array\ of\ Strings\ that\ is\ simply\ the\ names\ of\ each\ possible\ subCategory,\ given\ a\ category\n\ \n\ @param\ cat\ the\ index\ of\ a\ specific\ category\n\ @return\ the\ possible\ category\ names\ for\ the\ items\ in\ a\ specific\ category\ from\ the\ menu\n
comment7.params=cat\ subCat
comment7.target=java.lang.String[]\ getDescriptionList(int,\ int)
comment7.text=\n\ creates\ and\ returns\ an\ Array\ of\ Strings\ that\ is\ simply\ the\ names\ of\ each\ possible\ item,\ given\ a\ category\ and\ subCategory\n\ \n\ @param\ cat\ the\ index\ of\ a\ specific\ category\n\ @param\ subCat\ the\ index\ of\ a\ specific\ subCategory\n\ @return\ the\ possible\ category\ names\ for\ the\ items\ in\ a\ specific\ category\ and\ subCategory\ from\ the\ menu\n
comment8.params=cat\ subCat\ desc
comment8.target=Product\ getSelectedProduct(int,\ int,\ int)
comment8.text=\n\ returns\ a\ specific\ Product\ from\ the\ menu\n\ \n\ @param\ cat\ the\ index\ of\ a\ specific\ category\n\ @param\ subCat\ the\ index\ of\ a\ specific\ subCategory\n\ @param\ desc\ the\ index\ of\ a\ specific\ item\n\ @return\ the\ Product\ at\ index\ desc\ of\ category\ cat,\ subCategory\ subCat\n
comment9.params=
comment9.target=java.lang.String[]\ getCart()
comment9.text=\n\ creates\ and\ returns\ an\ Array\ of\ Strings\ representing\ the\ various\ items\ in\ the\ cart\n\ \n\ @return\ the\ Customer's\ cart\ in\ an\ Array\ of\ type\ String\n
numComments=19
